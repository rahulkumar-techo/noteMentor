/**
 * Unified Question Model
 * Supports MCQ, Short, and Long type questions in one main collection
 * Subschemas are cleanly separated with `_id: false`
 */

import { Schema, model, Types } from "mongoose";

/* ---------- üß© Subschemas ---------- */

// üü¶ MCQ schema
const McqSchema = new Schema(
  {
    options: [{ text: { type: String, required: true } }],
    correctAnswer: { type: String, required: true },
  },
  { _id: false }
);

// üü© Short Answer schema
const ShortSchema = new Schema(
  {
    expectedAnswer: { type: String, required: true },
  },
  { _id: false }
);

// üüß Long Answer schema
const LongSchema = new Schema(
  {
    expectedAnswer: { type: String, required: true },
    wordLimit: { type: Number, default: 200 },
  },
  { _id: false }
);

// üß† Attempt summary
const AttemptSummarySchema = new Schema(
  {
    userId: { type: Types.ObjectId, ref: "User" },
    score: Number,
    maxScore: Number,
    attemptedAt: { type: Date, default: Date.now },
  },
  { _id: false }
);

/* ---------- üèóÔ∏è Main Question Schema ---------- */

const QuestionSchema = new Schema(
  {
    creatorId: { type: Types.ObjectId, ref: "User", required: true, index: true },
    topic: { type: String, default: "general", index: true },
    question: { type: String, required: true },
    explanation: { type: String },
    difficulty: {
      type: String,
      enum: ["easy", "medium", "hard"],
      default: "medium",
    },
    type: {
      type: String,
      enum: ["mcq", "short", "long"],
      required: true,
    },

    // üëá type-based subschemas (one of these applies)
    mcq: { type: McqSchema },
    short: { type: ShortSchema },
    long: { type: LongSchema },

    // Attempts tracking
    attempts: [AttemptSummarySchema],
    attemptsCount: { type: Number, default: 0 },

    // Metadata
    isAI: { type: Boolean, default: false }, // Whether generated by AI
    language: { type: String, default: "English" },
  },
  { timestamps: true }
);

export default model("Question", QuestionSchema);
